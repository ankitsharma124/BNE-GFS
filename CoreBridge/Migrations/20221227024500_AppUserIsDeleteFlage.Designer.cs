// <auto-generated />
using System;
using CoreBridge.Models;
using CoreBridge.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoreBridge.Migrations
{
    [DbContext(typeof(CoreBridgeContext))]
    [Migration("20221227024500_AppUserIsDeleteFlage")]
    partial class AppUserIsDeleteFlage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.12");

            modelBuilder.Entity("CoreBridge.Models.Entity.AdminUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("AdminUsers");
                });

            modelBuilder.Entity("CoreBridge.Models.Entity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Email")
                        .HasColumnType("STRING");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("BOOL");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.Property<AdminUserRoleEnum>("Role")
                        .HasColumnType("INT64");

                    b.Property<string>("TitleCode")
                        .HasColumnType("STRING");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("STRING");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("CoreBridge.Models.Entity.DebugInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("RequestBody")
                        .HasColumnType("STRING");

                    b.Property<string>("RequestPath")
                        .HasColumnType("STRING");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("STRING");

                    b.Property<string>("TitleCode")
                        .HasColumnType("STRING");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("UserId")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.ToTable("DebugInfoList");
                });

            modelBuilder.Entity("CoreBridge.Models.Entity.TitleInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("DevUrl")
                        .HasColumnType("STRING");

                    b.Property<string>("HashKey")
                        .HasColumnType("STRING");

                    b.Property<string>("ProdUrl")
                        .HasColumnType("STRING");

                    b.Property<string>("PsClientId")
                        .HasColumnType("STRING");

                    b.Property<string>("PsClientSecoret")
                        .HasColumnType("STRING");

                    b.Property<int>("Ptype")
                        .HasColumnType("INT64");

                    b.Property<string>("QaUrl")
                        .HasColumnType("STRING");

                    b.Property<string>("SteamAppId")
                        .HasColumnType("STRING");

                    b.Property<string>("SteamPublisherKey")
                        .HasColumnType("STRING");

                    b.Property<string>("SwitchAppId")
                        .HasColumnType("STRING");

                    b.Property<string>("TestUrl")
                        .HasColumnType("STRING");

                    b.Property<string>("TitleCode")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.Property<string>("TrialTitleCode")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("XboxTitleId")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("TitleCode");

                    b.ToTable("TitleInfo");

                    b.HasData(
                        new
                        {
                            Id = "TestTitleId",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HashKey = "TEST111111111111",
                            Ptype = 0,
                            TitleCode = "TestTitleCode",
                            TitleName = "testTitleName",
                            TrialTitleCode = "TestTrialTitleCode",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("STRING(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("STRING(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT64");

                    b.Property<string>("ClaimType")
                        .HasColumnType("STRING");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("STRING");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("STRING");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INT64");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("STRING");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("STRING(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("BOOL");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("BOOL");

                    b.Property<string>("LockoutEnd")
                        .HasColumnType("STRING(48)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("STRING(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("STRING(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("STRING");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("STRING");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("BOOL");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("STRING");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("BOOL");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("STRING(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT64");

                    b.Property<string>("ClaimType")
                        .HasColumnType("STRING");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("STRING");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("STRING");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("STRING");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("STRING");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("STRING");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("STRING");

                    b.Property<string>("RoleId")
                        .HasColumnType("STRING");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("STRING");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .HasColumnType("STRING");

                    b.Property<string>("Value")
                        .HasColumnType("STRING");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
